pipeline:
  synch_dev_secrets:
    image: quay.io/ukhomeofficedigital/cop-secrets
    environment:
      - DRONE_SERVER=https://drone.acp.homeoffice.gov.uk
      - DEPLOY_ENV=dev
    secrets:
      - source: DEV_DRONE_AWS_ACCESS_KEY_ID
        target: AWS_ACCESS_KEY_ID
      - source: DEV_DRONE_AWS_SECRET_ACCESS_KEY
        target: AWS_SECRET_ACCESS_KEY
      - source: DRONE_PUBLIC_TOKEN
        target: DRONE_TOKEN
    when:
      environment: secrets
      event: deployment

  synch_staging_secrets:
    image: quay.io/ukhomeofficedigital/cop-secrets
    environment:
      - DRONE_SERVER=https://drone.acp.homeoffice.gov.uk
      - DEPLOY_ENV=staging
    secrets:
      - source: STAGING_DRONE_AWS_ACCESS_KEY_ID
        target: AWS_ACCESS_KEY_ID
      - source: STAGING_DRONE_AWS_SECRET_ACCESS_KEY
        target: AWS_SECRET_ACCESS_KEY
      - source: DRONE_PUBLIC_TOKEN
        target: DRONE_TOKEN
    when:
      environment: secrets
      event: deployment

  synch_production_secrets:
    image: quay.io/ukhomeofficedigital/cop-secrets
    environment:
      - DRONE_SERVER=https://drone.acp.homeoffice.gov.uk
      - DEPLOY_ENV=production
    secrets:
      - source: PRODUCTION_DRONE_AWS_ACCESS_KEY_ID
        target: AWS_ACCESS_KEY_ID
      - source: PRODUCTION_DRONE_AWS_SECRET_ACCESS_KEY
        target: AWS_SECRET_ACCESS_KEY
      - source: DRONE_PUBLIC_TOKEN
        target: DRONE_TOKEN
    when:
      environment: secrets
      event: deployment

  #test:
  #  image: digitalpatterns/jdk:1
  #  environment:
  #    - DOCKER_HOST=tcp://172.17.0.1:2375
  #    - GRADLE_USER_HOME=~/.gradle
  #  commands:
  #    - ./gradlew test jacocoTestReport
  #  when:
  #    event:
  #      - push
  #      - pull_request

  build:
    image: quay.io/ukhomeofficedigital/drone-docker
    environment:
      - DOCKER_HOST=tcp://172.17.0.1:2375
    commands:
      - docker build -t cop-private-workflow-engine:$${DRONE_COMMIT_SHA} .
    when:
      event: push

  image_to_quay:
    image: quay.io/ukhomeofficedigital/drone-docker
    secrets:
    - source: QUAY_USERNAME
      target: DOCKER_USERNAME
    - source: QUAY_PASSWORD
      target: DOCKER_PASSWORD
    registry: quay.io
    repo: quay.io/ukhomeofficedigital/cop-private-workflow-engine
    tags: ${DRONE_COMMIT_SHA}
    when:
      branch: master
      event: push

  deploy_to_dev:
    image: quay.io/ukhomeofficedigital/kd
    secrets:
    - source: DEV_KUBE_SERVER
      target: KUBE_SERVER
    - source: DEV_KUBE_TOKEN
      target: KUBE_TOKEN
    - source: DEV_KUBE_NAMESPACE_PRIVATE_COP
      target: KUBE_NAMESPACE
    - source: NGINX_IMAGE
      target: NGINX_IMAGE
    - source: NGINX_TAG
      target: NGINX_TAG
    - source: DEV_ENGINE_NAME
      target: ENGINE_NAME
    - source: DEV_ENGINE_URL
      target: ENGINE_URL
    - source: DEV_ENGINE_IMAGE
      target: ENGINE_IMAGE
    - source: DEV_ENGINE_AWS_ACCESS_KEY_ID
      target: ENGINE_AWS_ACCESS_KEY_ID
    - source: DEV_ENGINE_AWS_SECRET_ACCESS_KEY
      target: ENGINE_AWS_SECRET_ACCESS_KEY
    commands:
      - export ENGINE_TAG=$${DRONE_COMMIT_SHA}
      - export ENGINE_SPRING_PROFILES_ACTIVE="dev"
      - kd --insecure-skip-tls-verify -f kube/cert.yml
      - kd --insecure-skip-tls-verify -f kube/secret.yml
      - kd --insecure-skip-tls-verify -f kube/network-policy.yml
      - kd --insecure-skip-tls-verify -f kube/service.yml
      - kd --insecure-skip-tls-verify -f kube/nginx-configmap.yml
      - kd --insecure-skip-tls-verify -f kube/certs-configmap.yml
      - kd --insecure-skip-tls-verify -f kube/deployment.yml --timeout=5m
      - kd --insecure-skip-tls-verify -f kube/ingress.yml
    when:
      branch: master
      event: push

  vulnerability-scan:
    image: quay.io/ukhomeofficedigital/anchore-submission:latest
    dockerfile: Dockerfile
    image_name: cop-private-workflow-engine:${DRONE_COMMIT_SHA}
    local_image: true
    tolerate: low
    fail_on_detection: false
    when:
      branch: master
      event: push

  deploy_to_staging:
    image: quay.io/ukhomeofficedigital/kd
    secrets:
    - source: STAGING_KUBE_SERVER
      target: KUBE_SERVER
    - source: STAGING_KUBE_TOKEN
      target: KUBE_TOKEN
    - source: STAGING_KUBE_NAMESPACE_PRIVATE_COP
      target: KUBE_NAMESPACE
    - source: NGINX_IMAGE
      target: NGINX_IMAGE
    - source: NGINX_TAG
      target: NGINX_TAG
    - source: STAGING_ENGINE_NAME
      target: ENGINE_NAME
    - source: STAGING_ENGINE_URL
      target: ENGINE_URL
    - source: STAGING_ENGINE_IMAGE
      target: ENGINE_IMAGE
    - source: STAGING_ENGINE_AWS_ACCESS_KEY_ID
      target: ENGINE_AWS_ACCESS_KEY_ID
    - source: STAGING_ENGINE_AWS_SECRET_ACCESS_KEY
      target: ENGINE_AWS_SECRET_ACCESS_KEY
    commands:
      - export ENGINE_TAG=$${DRONE_COMMIT_SHA}
      - export ENGINE_SPRING_PROFILES_ACTIVE="staging"
      - kd --insecure-skip-tls-verify -f kube/cert.yml
      - kd --insecure-skip-tls-verify -f kube/secret.yml
      - kd --insecure-skip-tls-verify -f kube/network-policy.yml
      - kd --insecure-skip-tls-verify -f kube/service.yml
      - kd --insecure-skip-tls-verify -f kube/nginx-configmap.yml
      - kd --insecure-skip-tls-verify -f kube/certs-configmap.yml
      - kd --insecure-skip-tls-verify -f kube/deployment.yml --timeout=5m
      - kd --insecure-skip-tls-verify -f kube/ingress.yml
    when:
      environment: staging
      event: deployment

  deploy_to_production:
    image: quay.io/ukhomeofficedigital/kd
    secrets:
    - source: PRODUCTION_KUBE_SERVER
      target: KUBE_SERVER
    - source: PRODUCTION_KUBE_TOKEN
      target: KUBE_TOKEN
    - source: PRODUCTION_KUBE_NAMESPACE_PRIVATE_COP
      target: KUBE_NAMESPACE
    - source: NGINX_IMAGE
      target: NGINX_IMAGE
    - source: NGINX_TAG
      target: NGINX_TAG
    - source: PRODUCTION_ENGINE_NAME
      target: ENGINE_NAME
    - source: PRODUCTION_ENGINE_URL
      target: ENGINE_URL
    - source: PRODUCTION_ENGINE_IMAGE
      target: ENGINE_IMAGE
    - source: PRODUCTION_ENGINE_AWS_ACCESS_KEY_ID
      target: ENGINE_AWS_ACCESS_KEY_ID
    - source: PRODUCTION_ENGINE_AWS_SECRET_ACCESS_KEY
      target: ENGINE_AWS_SECRET_ACCESS_KEY
    commands:
      - export ENGINE_TAG=$${DRONE_COMMIT_SHA}
      - export ENGINE_SPRING_PROFILES_ACTIVE="production"
      - kd --insecure-skip-tls-verify -f kube/cert.yml
      - kd --insecure-skip-tls-verify -f kube/secret.yml
      - kd --insecure-skip-tls-verify -f kube/network-policy.yml
      - kd --insecure-skip-tls-verify -f kube/service.yml
      - kd --insecure-skip-tls-verify -f kube/nginx-configmap.yml
      - kd --insecure-skip-tls-verify -f kube/certs-configmap.yml
      - kd --insecure-skip-tls-verify -f kube/deployment.yml --timeout=5m
      - kd --insecure-skip-tls-verify -f kube/ingress.yml
    when:
      environment: production
      event: deployment

  create-change-desc-production:
    image: docker:git
    commands:
      - git show --name-only >> $SNOW_DESC_FILE
    when:
      environment: production
      event: deployment

  open-snow-change-production:
    image: quay.io/ukhomeofficedigital/snowtify:latest
    secrets:
      - source: PRODUCTION_SERVICE_NOW_PASSWORD
        target: SNOW_PROD_PASS
      - source: PRODUCTION_SERVICE_NOW_URL
        target: SNOW_ENDPOINT
      - source: PRODUCTION_SERVICE_NOW_USERNAME
        target: SNOW_PROD_USER
    environment:
      - SNOW_EXTERNAL_ID=${DRONE_REPO}:${DRONE_COMMIT_SHA}
    when:
      environment: production
      event: deployment

  complete-snow-change-production:
    image: quay.io/ukhomeofficedigital/snowtify:latest
    secrets:
      - source: PRODUCTION_SERVICE_NOW_PASSWORD
        target: SNOW_PROD_PASS
      - source: PRODUCTION_SERVICE_NOW_URL
        target: SNOW_ENDPOINT
      - source: PRODUCTION_SERVICE_NOW_USERNAME
        target: SNOW_PROD_USER
    comments: Successful deployment of ${DRONE_REPO}:${DRONE_COMMIT_SHA}
    deployment_outcome: success
    when:
      environment: production
      event: deployment
      status: success

  cancel-snow-change-production:
    image: quay.io/ukhomeofficedigital/snowtify:latest
    secrets:
      - source: PRODUCTION_SERVICE_NOW_PASSWORD
        target: SNOW_PROD_PASS
      - source: PRODUCTION_SERVICE_NOW_URL
        target: SNOW_ENDPOINT
      - source: PRODUCTION_SERVICE_NOW_USERNAME
        target: SNOW_PROD_USER
    comments: Failed deployment of ${DRONE_REPO}:${DRONE_COMMIT_SHA}
    deployment_outcome: fail
    when:
      environment: production
      event: deployment
      status: failure

  notify:
    image: plugins/slack
    secrets: [ SLACK_WEBHOOK ]
    channel: cop-deployments
    username: Drone Build Watcher
    template: >
      {{#build.deployTo}}
        *{{repo.name}} - Build {{build.number}} - {{uppercasefirst build.deployTo}} - {{uppercase build.status}}*
        {{build.link}}
      {{else}}
        *{{repo.name}} - Build {{build.number}} - Development - {{uppercase build.status}}*
        {{build.link}}
      {{/build.deployTo}}
    when:
      branch: master
      event: [ push, deployment ]
      status: [ success, failure ]
