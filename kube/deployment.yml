---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{.ENGINE_NAME}}
spec:
  selector:
    matchLabels:
      name: {{.ENGINE_NAME}}
  replicas: 3
  revisionHistoryLimit: 3
  template:
    metadata:
      labels:
        name: {{.ENGINE_NAME}}
    spec:
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: proxy
        image: {{.NGINX_IMAGE}}:{{.NGINX_TAG}}
        imagePullPolicy: Always
        securityContext:
          runAsNonRoot: true
          capabilities:
            drop:
             - SETUID
             - SETGID
        resources:
         limits:
          memory: "100Mi"
          cpu: "100m"
         requests:
          memory: "50Mi"
          cpu: "100m"
        command: ["/bin/bash"]
        args: ["-c", "/bin/cp /mnt/configmap/* /usr/local/openresty/nginx/conf/locations/; cd /usr/local/openresty; /go.sh"]
        env:
        - name: CUSTOM_PROXY_CONFIG
          value: "TRUE"
        - name: CUSTOM_SECURITY_DEFAULTS
          value: "TRUE"
        - name: SERVER_CERT
          value: "/certs/tls.crt"
        - name: SERVER_KEY
          value: "/certs/tls.key"
        - name: SSL_CIPHERS
          value: "ECDHE-RSA-AES128-GCM-SHA256:AES256+EECDH:AES256+EDH:!aNULL"
        - name: ENABLE_UUID_PARAM
          value: "HEADER"
        - name: NAXSI_USE_DEFAULT_RULES
          value: "FALSE"
        - name: PORT_IN_HOST_HEADER
          value: "FALSE"
        - name: ERROR_REDIRECT_CODES
          value: "599"
        - name: ADD_NGINX_SERVER_CFG
          value: 'gzip off; location = /reload { allow 127.0.0.1; deny all; content_by_lua_block { os.execute("touch /tmp/nginx-reload-triggered; /usr/local/openresty/nginx/sbin/nginx -s reload; touch /tmp/nginx-reload-complete;") } }'
        - name: STATSD_METRICS
          value: "FALSE"
        ports:
        - name: https
          containerPort: 10443
        volumeMounts:
          - name: certs
            mountPath: /certs
            readOnly: true
          - name: proxyconfigmap
            mountPath: /mnt/configmap
      - name: {{.ENGINE_NAME}}
        image: {{.ENGINE_IMAGE}}:{{.ENGINE_TAG}}
        imagePullPolicy: Always
        securityContext:
          runAsNonRoot: true
        command: ["/usr/bin/run.sh"]
        args: ["-Djava.security.egd=file:/dev/./urandom", "-Xms1536m", "-Xmx1536m", "-XX:MaxMetaspaceSize=256m", "-XX:MaxJavaStackTraceDepth=15", "-Djavax.net.ssl.trustStorePassword=changeit", "-Djavax.net.ssl.trustStore=/etc/keystore/cacerts", "-jar", "/app/dist/libs/workflow-engine.jar"]
        resources:
          requests:
            memory: "2304Mi"
            cpu: "2000m"
          limits:
            memory: "2304Mi"
            cpu: "2000m"
        readinessProbe:
          httpGet:
            path: /engine
            port: {{.ENGINE_PORT}}
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 20
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: {{.ENGINE_PORT}}
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 20
        volumeMounts:
          - name: certs
            mountPath: /certs
            readOnly: true
          - name: cacerts
            mountPath: /cacerts
          - name: trustedcerts
            mountPath: /trustedcerts
        env:
          - name: API_COP_URL
            value: "{{.API_COP_PROTOCOL}}{{.API_COP_URL}}"
          - name: API_REF_URL
            value: "{{.API_REF_PROTOCOL}}{{.API_REF_URL}}"
          - name: WWW_URL
            value: "{{.WWW_PROTOCOL}}{{.WWW_URL}}"
          - name: WWW_UI_PROTOCOL
            value: "{{.WWW_UI_PROTOCOL}}"
          - name: WWW_UI_TXT_PROTOCOL
            value: "{{.WWW_UI_TXT_PROTOCOL}}"
          - name: REDIS_URL
            value: "{{.REDIS_URL}}"
          - name: REDIS_SSL
            value: "{{.REDIS_SSL}}"
          - name: REDIS_TOKEN
            valueFrom:
              secretKeyRef:
                name: {{.ENGINE_NAME}}
                key: redisAuthToken
          - name: DB_ENGINE_DRIVER
            value: {{.DB_ENGINE_DRIVER}}
          - name: DB_ENGINE_TYPE
            value: {{.DB_ENGINE_TYPE}}
          - name: KEYCLOAK_REALM
            value: "{{.KEYCLOAK_REALM}}"
          - name: KEYCLOAK_URL
            value: "{{.KEYCLOAK_PROTOCOL}}{{.KEYCLOAK_URL}}"
          - name: ENGINE_KEYCLOAK_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: {{.ENGINE_NAME}}
                key: authClientSecret
          - name: ENGINE_KEYCLOAK_CLIENT_ID
            value: {{.ENGINE_NAME}}
          - name: GOV_NOTIFY_API_KEY
            valueFrom:
              secretKeyRef:
                name: {{.ENGINE_NAME}}
                key: govNotifyApiKey
          - name: GOV_NOTIFY_NOTIFICATION_EMAIL_TEMPLATE_ID
            value: "{{.GOV_NOTIFY_EMAIL_TEMPLATE_ID}}"
          - name: GOV_NOTIFY_NOTIFICATION_SMS_TEMPLATE_ID
            value: "{{.GOV_NOTIFY_SMS_TEMPLATE_ID}}"
          - name: ENGINE_SPRING_PROFILES_ACTIVE
            value: "{{.ENGINE_SPRING_PROFILES_ACTIVE}}"
          - name: DB_ENGINE_JDBC_PROTOCOL
            value: "{{.DB_ENGINE_JDBC_PROTOCOL}}"
          - name: DB_ENGINE_HOSTNAME
            value: "{{.DB_ENGINE_HOSTNAME}}"
          - name: DB_ENGINE_DEFAULT_DBNAME
            value: "{{.DB_ENGINE_DEFAULT_DBNAME}}"
          - name: DB_ENGINE_JDBC_OPTIONS
            value: "{{.DB_ENGINE_JDBC_OPTIONS}}"
          - name: DB_ENGINE_DEFAULT_USERNAME
            value: "{{.DB_ENGINE_DEFAULT_USERNAME}}"
          - name: DB_ENGINE_DEFAULT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{.ENGINE_NAME}}
                key: engineDbPassword
      volumes:
      - name: certs
        secret:
          secretName: "{{.ENGINE_NAME}}-pod-tls"
      - name: trustedcerts
        configMap:
          name: {{.ENGINE_NAME}}-certs
      - name: cacerts
        emptyDir: {}
      - name: proxyconfigmap
        configMap:
          name: {{.ENGINE_NAME}}
